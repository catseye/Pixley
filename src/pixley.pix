(lambda (interpret program env)
  (let*  ((find (lambda (self elem alist)
            (cond
              ((null? alist)
                (quote nothing))
              (else
                (let* ((entry (car alist))
                       (key   (car entry))
                       (rest  (cdr alist)))
                  (cond
                    ((equal? elem key)
                      entry)
                    (else
                      (self self elem rest))))))))
          (interpret-args (lambda (interpret-args args env)
            (cond
              ((null? args)
                args)
              (else
                (let* ((arg  (car args))
                       (rest (cdr args)))
                  (cons (interpret interpret arg env) (interpret-args interpret-args rest env)))))))
          (expand-args (lambda (expand-args formals argvals)
            (cond
              ((null? formals)
                formals)
              (else
                (let* ((formal       (car formals))
                       (rest-formals (cdr formals))
                       (argval       (car argvals))
                       (rest-argvals (cdr argvals)))
                  (cons (cons formal (cons argval (quote ()))) (expand-args expand-args rest-formals rest-argvals)))))))
          (concat-envs (lambda (concat-envs new-env old-env)
            (cond
              ((null? new-env)
                old-env)
              (else
                (let* ((entry (car new-env))
                       (rest  (cdr new-env)))
                  (cons entry (concat-envs concat-envs rest old-env)))))))
           (call-lambda (lambda (func args env)
             (let* ((arg-vals (interpret-args interpret-args args env)))
               (func arg-vals)))))
    (cond
      ((null? program)
        program)
      ((list? program)
        (let* ((tag   (car program))
               (args  (cdr program))
               (entry (find find tag env)))
          (cond
            ((list? entry)
              (let* ((func (cadr entry)))
                (call-lambda func args env)))
            ((equal? tag (quote lambda))
              (let* ((formals (car args))
                     (body    (cadr args)))
                (lambda (arg-vals)
                  (let* ((arg-env   (expand-args expand-args formals arg-vals))
                         (new-env   (concat-envs concat-envs arg-env env)))
                    (interpret interpret body new-env)))))
            ((equal? tag (quote cond))
              (cond
                ((null? args)
                  args)
                (else
                  (let* ((branch   (car args))
                         (test     (car branch))
                         (expr     (cadr branch)))
                    (cond
                      ((equal? test (quote else))
                        (interpret interpret expr env))
                      (else
                        (cond
                          ((interpret interpret test env)
                            (interpret interpret expr env))
                          (else
                            (let* ((branches (cdr args))
                                   (newprog (cons (quote cond) branches)))
                              (interpret interpret newprog env))))))))))
            ((equal? tag (quote let*))
              (let* ((bindings (car args))
                     (body     (cadr args)))
                (cond
                  ((null? bindings)
                    (interpret interpret body env))
                  (else
                    (let* ((binding  (car bindings))
                           (rest     (cdr bindings))
                           (ident    (car binding))
                           (expr     (cadr binding))
                           (value    (interpret interpret expr env))
                           (new-bi   (cons ident (cons value (quote ()))))
                           (new-env  (cons new-bi env))
                           (newprog  (cons (quote let*) (cons rest (cons body (quote ()))))))
                      (interpret interpret newprog new-env))))))
            ((equal? tag (quote null?))
              (let* ((subject (car args)))
                (null? (interpret interpret subject env))))
            ((equal? tag (quote list?))
              (let* ((subject (car args)))
                (list? (interpret interpret subject env))))
            ((equal? tag (quote quote))
              (let* ((subject (car args)))
                subject))
            ((equal? tag (quote car))
              (let* ((subject (car args)))
                (car (interpret interpret subject env))))
            ((equal? tag (quote cdr))
              (let* ((subject (car args)))
                (cdr (interpret interpret subject env))))
            ((equal? tag (quote cadr))
              (let* ((subject (car args)))
                (car (cdr (interpret interpret subject env)))))
            ((equal? tag (quote cons))
              (let* ((a (car args))
                     (b (cadr args)))
                (cons (interpret interpret a env) (interpret interpret b env))))
            ((equal? tag (quote equal?))
              (let* ((a (car args))
                     (b (cadr args)))
                (equal? (interpret interpret a env) (interpret interpret b env))))
            ((null? tag)
              tag)
            ((list? tag)
              (let* ((func (interpret interpret tag env)))
                (call-lambda func args env)))
            (else
              (call-lambda tag args env)))))
      (else
        (let* ((entry (find find program env)))
          (cond
            ((list? entry)
              (cadr entry))
            (else
              (quote illegal-program-error))))))))
